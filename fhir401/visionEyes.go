// Copyright 2022 - Fasten Health
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir401

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/fastenhealth/gofhir-models-gen
// PLEASE DO NOT EDIT BY HAND

// VisionEyes is documented here http://hl7.org/fhir/ValueSet/vision-eye-codes
type VisionEyes int

const (
	VisionEyesRight VisionEyes = iota
	VisionEyesLeft
)

func (code VisionEyes) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *VisionEyes) UnmarshalJSON(input []byte) error {
	var s string
	if err := json.Unmarshal(input, &s); err != nil {
		return fmt.Errorf("failed to Unmarshal VisionEyes code `%s`", s)
	}
	s = strings.ToLower(s)
	switch s {
	case "right":
		*code = VisionEyesRight
	case "left":
		*code = VisionEyesLeft
	default:
		return fmt.Errorf("unknown VisionEyes code `%s`", s)
	}
	return nil
}
func (code VisionEyes) String() string {
	return code.Code()
}
func (code VisionEyes) Code() string {
	switch code {
	case VisionEyesRight:
		return "right"
	case VisionEyesLeft:
		return "left"
	}
	return "<unknown>"
}
func (code VisionEyes) Display() string {
	switch code {
	case VisionEyesRight:
		return "Right Eye"
	case VisionEyesLeft:
		return "Left Eye"
	}
	return "<unknown>"
}
func (code VisionEyes) Definition() string {
	switch code {
	case VisionEyesRight:
		return "Right Eye."
	case VisionEyesLeft:
		return "Left Eye."
	}
	return "<unknown>"
}
